#!/usr/bin/env bash
set -euf -o pipefail

# This script checks if the HTTPS_PROXY environment variable is set.
# If set, it reads the HTTPS_PROXY_DOMAINS environment variable (expected to be a space-separated string),
# converts it into an array, and retrieves SSL certificates for each domain through the proxy.
# The certificates are then stored in /usr/local/share/ca-certificates/ and the system's certificate store is updated.

# Usage:
# 1. Set the HTTPS_PROXY environment variable to your proxy address.
# 2. Set the HTTPS_PROXY_DOMAINS environment variable to a space-separated list of domains.
# 3. Run this script.

# Example:
# export HTTPS_PROXY=http://proxy.example.com:8080
# export HTTPS_PROXY_DOMAINS="github.com api.github.com"
# ./http-proxy-add-self-signed-certs.sh

# Check if HTTPS_PROXY is set
if [ -z "${HTTPS_PROXY-}" ]; then
  echo "HTTPS_PROXY is not set. Exiting."
  exit
fi

# Strip http:// or https:// for the openssl command
HTTPS_PROXY=$(echo "$HTTPS_PROXY" | sed 's~http[s]\?://~~')

# Check if HTTPS_PROXY_DOMAINS is set and non-empty
if [ -z "${HTTPS_PROXY_DOMAINS-}" ]; then
  echo "HTTPS_PROXY_DOMAINS is not set. Exiting."
  exit
fi

# Convert HTTPS_PROXY_DOMAINS to an array
IFS=' ' read -r -a domains <<< "$HTTPS_PROXY_DOMAINS"

# Retrieve and store certificates for each domain
for domain in "${domains[@]}"; do
  echo "Retrieving certificate for $domain..."
  openssl s_client -showcerts -connect "$domain:443" -proxy "$HTTPS_PROXY" < /dev/null | \
  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > "/usr/local/share/ca-certificates/${domain}.crt"
done

# Update the system's certificate store
update-ca-certificates

echo "Certificates updated successfully."
